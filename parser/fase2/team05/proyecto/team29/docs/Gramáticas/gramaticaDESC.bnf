

/*INICIO DE LA GRAMATICA */


<stmtList> ::= <stmt> <stmtList_>
<stmtList_>::= <stmt> <stmtList_>
              |/*epsilon*/ 




<stmt> ::= <selectStmt> ';'
        | <createStmt> ';'
        | <showStmt> ';'
        | <alterStmt> ';'
        | <dropStmt> ';'
        | <insertStmt> ';'
        | <updateStmt> ';'
        | <deleteStmt> ';'



<extract> ::= EXTRACT '(' <optsExtract> FROM <timeStamp> ')'

<timeStamp> ::= TIMESTAMP stringLit
        | INTERVAL stringLit


<optsExtract> ::= YEAR
                | MONTH
                | DAY
                | HOUR 
                | MINUTE
                | SECOND



<datePart> ::= DATE_PART '(' stringLit ',' <dateSource> ')'

<dateSource> ::= TIMESTAMP stringLit
        | DATE stringLit
        | TIME stringLit
        | INTERVAL <intervalFields> stringLit
        | NOW '(' ')'


<current> ::= CURRENT_DATE
        | CURRENT_TIME


<type> ::= id
        | id '(' <literalList> ')'
        | SMALLINIT
        | INTEGER
        | BIGINIT 
        | DECIMAL
        | NUMERIC
        | REAL
        | DOUBLE PRECISION
        | MONEY
        | CHARACTER VARYING <optParams>
        | VARCHAR <optParams>
        | CHARACTER <optParams>
        | CHAR <optParams>
        | TEXT
        | <timeType>

<timeType> ::= TIMESTAMP <optParams>
        | DATE
        | TIME <optParams>
        | INTERVAL <intervalFields> <optParams>

<intervalFields> ::= YEAR
                | MONTH
                | DAY
                | HOUR
                | MINUTE
                | SECOND
                |

<optParams> ::= '(' <literalList> ')'



<literalList>::= <literal> <literalList_>
<literalList_>::= ','<literal> <literalList_>
                  |

<expresion> ::= <datatype>
            | <expComp>
            | <expBool>

<datatype> ::=  <colName> <datatype_>
                |<literal> <datatype_>
                |<funcCall> <datatype_>
                |'(' <datatype_> 

<datatype_>::= '+' <datatype> <datatype_>
               |'-' <datatype> <datatype_>
               |'*' <datatype> <datatype_>
               |'/' <datatype> <datatype_>
               |'%' <datatype> <datatype_>
               |'^' <datatype> <datatype_>
               |'||' <datatype> <datatype_>
               |'&' <datatype> <datatype_>
               |'|' <datatype> <datatype_>
               |'#' <datatype> <datatype_>
               |'~' <datatype> <datatype_>
               |'>>' <datatype> <datatype_>
               |'<<' <datatype> <datatype_>
               | <datatype> ')' <datatype_>
               |epsilon


<expComp> ::= <datatype> '<' <datatype>
            | <datatype> '>' <datatype>
            | <datatype> '>=' <datatype>
            | <datatype> '<=' <datatype>
            | <datatype> '=' <datatype>
            | <datatype> '!=' <datatype>
            | <datatype> '<>' <datatype>
            | <datatype> BETWEEN <datatype> AND <datatype>
            | <datatype> NOT BETWEEN <datatype> AND <datatype>
            | <datatype> BETWEEN SYMMETRIC <datatype> AND <datatype>
            | <datatype> IS DISTINCT FFROM <datatype>
            | <datatype> IS NOT DISTINCT FROM <datatype>
            | <datatype> IS NULL
            | <datatype> IS NOT NULL
            | <datatype> ISNULL
            | <datatype> NOTNULL
            | <datatype> IS TRUE
            | <datatype> IS NOT TRUE
            | <datatype> IS FALSE
            | <datatype> IS NOT FALSE
            | <datatype> IS UNKNOWN
            | <datatype> IS NOT UNKNOWN

<expSubq> ::= <datatype> '<'  <subqValues> '(' <selectStmt> ')'
            | <datatype> '>'  <subqValues> '(' <selectStmt> ')'
            | <datatype> '>=' <subqValues> '(' <selectStmt> ')'
            | <datatype> '<=' <subqValues> '(' <selectStmt> ')'
            | <datatype> '='  <subqValues> '(' <selectStmt> ')'
            | <datatype> '!=' <subqValues> '(' <selectStmt> ')'
            | <datatype> '<>' <subqValues> '(' <selectStmt> ')'
            | <datatype> BETWEEN <datatype> AND <datatype> <subqValues> '(' <selectStmt> ')'
            | <datatype> NOT BETWEEN <datatype> AND <datatype> <subqValues> '(' <selectStmt> ')'
            | <datatype> BETWEEN SYMMETRIC <datatype> AND <datatype> <subqValues> '(' <selectStmt> ')'
            | <datatype> IS DISTINCT FFROM <datatype> <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NOT DISTINCT FROM <datatype> <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NULL <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NOT NULL <subqValues> '(' <selectStmt> ')'
            | <datatype> ISNULL <subqValues> '(' <selectStmt> ')'
            | <datatype> NOTNULL <subqValues> '(' <selectStmt> ')'
            | <datatype> IS TRUE <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NOT TRUE <subqValues> '(' <selectStmt> ')'
            | <datatype> IS FALSE <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NOT FALSE <subqValues> '(' <selectStmt> ')'
            | <datatype> IS UNKNOWN <subqValues> '(' <selectStmt> ')'
            | <datatype> IS NOT UNKNOWN <subqValues> '(' <selectStmt> ')'
            | <stringExp> LIKE pattern 


<stringExp> ::= stringLit
        | <colName>

<subqValues> ::= ALL
                | ANY
                | SOME

<boolean> ::= <expComp>
            | litBool
            | EXISTS '(' <selectStmt> ')'
            | <datatype> IN '(' <selectStmt> ')'
            | <datatype> NOT IN '(' <selectStmt> ')'
            | <expSubq>



<expBool> ::= NOT <expBool> <expBool_>
            |<boolean> <expBool_>

<expBool_> ::=  AND <expBool> <expBool_>
               |OR <expBool> <expBool_>
               |/*epsilon*/ 


<booleanCheck> ::= <expComp>
            | litBool



<expBoolCheck> ::= NOT <expBoolCheck>
                |<booleanCheck> <expBoolCheck_>

<expBoolCheck_> ::= AND <booleanCheck> <expBoolCheck_>
                    |OR <booleanCheck> <expBoolCheck_>
                    |/*epsilon*/



<literal> ::= litBool
            | litString
            | litNum
            | litChar


<funcCall> ::= funcMath '(' <paramList> ')'
            | funcBool '(' <paramList> ')'
            | funcTrig '(' <paramList> ')'


<paramList> ::= <datatype> <paramList_>

<paramList_> ::= ',' <datatype> <paramList_>
                |/*epsilon*/



<selectStmt>::= SELECT <selectParams> FROM <tableExp> <joinList> <whereCl> <groupByCl> <orderByCl> <limitCl><selectStmt_>
            | SELECT DISTINCT <selectParams> FROM <tableExp> <whereCl> <groupByCl> <selectStmt_>
            | '('<selectStmt_>

<selectStmt_>::= UNION <allOpt> <selectStmt> <selectList_>
            | INTERSECT <allOpt> <selectStmt> <selectList_>
            | EXCEPT <allOpt> <selectStmt> <selectList_>
            | <selectStmt>')' <selectStmt_>
            |/*epsilon*/


<allOpt> ::= ALL
            |

<selectParams> ::= '*'
                | <selectList>


<selectList> ::= <expresion> <selectList_>

<selectList_> ::= ',' <selectList_>
                |/*epsilon*/

<optAlias> ::= AS id
            | id
            |


<tableExp> ::= <fromBody> <tableExp_>

<tableExp_> ::= ','<fromBody> <tableExp_>
            |/*epsilon*/


<colName> ::= id
            | id.id

<fromBody> ::= <colName>
            | '(' <selectStmt> ')'


<joinList> ::= <joinCl> <joinList_>

<joinList_> ::= <joinCl> <joinList_>
                |/*epsilon*/

<joinCl> ::= <joinOpt> JOIN <colName> ON <expBool>
        | <joinOpt> JOIN <colName> USING '(' <nameList> ')'
        | NATURAL <joinOpt> JOIN <colName>
        |


<nameList> ::= <colName> <nameList_>
<nameList_> ::= ',' <colName> <nameList_>
                |/*epsilon*/ 


<joinOpt> ::= INNER
            | LEFT 
            | LEFT OUTER
            | RIGHT
            | RIGHT OUTER
            | FULL
            | FULL OUTER

<whereCl> ::= WHERE <expBool>
            | /*epsilon*/


<groupByCl> ::= GROUP BY <groupList> <havingCl>
            | 

<groupList> ::= <groupElem> <groupList_>
<groupList_> ::= ',' <colName>
            |/*epsilon*/


<havingCl> ::= HAVING <expBool>
            |

<orderByCl> ::= ORDER BY <orderList>

<orderList> ::= <orderByElem> <orderList_>
<orderList_>:: ',' <orderByElem> <orderList_>
           |/*epsilon*/


<orderByElem> ::= <colName> <orderOpts> <orderNull>

<orderOpts> ::= ASC
            | DESC
            |

<orderNull> ::= NULL FIRST
            | NULL LAST
            |

<limitCl> ::= LIMIT number <offsetLimit>
            | LIMIT ALL <offsetLimit>
            |



<offsetLimit> ::= OFFSET number
                |

<createStmt> ::= CREATE <createBody>

<createBody> ::= OR REPLACE <createOpts>
             | <createOpts>

<createOpts> ::= TABLE <ifNotExists> id '(' <createTableList> ')'
            | DATABASE <ifNotExists> id <createOwner> <createMode>
            | TYPE <ifNotExists> id AS ENUM '(' <paramList> ')'


<inheritsOpt> ::= INHERITS '(' id ')'
                |

<ifNotExists> ::= IF NOT EXISTS
                | 

<createTableList> ::= <createTable> <createTableList_>
<createTableList_> ::= ',' <createTable> <createTableList_>
                      |/*epsilon*/

<createTable> ::= id id <createOpts>
                | <createConstraint>
                | <createUnique>
                | <createPrimary>
                | <createForeign>

<createOpts> ::= <colOptionsList>
            | 


<createConstraint> ::= <constrName> CHECK '(' <expBoolCheck> ')'

<createUnique> ::= UNIQUE '(' <idList> ')'

<idList>::= id <idList_>
<idList_>::= ',' id <idList_>
           |/*epsilon*/

<createPrimary> ::= PRIMARY KEY '(' <idList> ')'

<createForeign> ::= FOREIGN KEY '(' <idList> ')' REFERENCES id '(' <idList> ')'

<constrName> ::= CONSTRAINT id 
            |


<colOptionsList>::= <colOptions> <colOptionsList_>
<colOptionsList_>::= <colOptions><colOptionsList_>
                   |/*epsilon*/


<colOptions> ::= <defaultVal>
            | <nullOpt>
            | <constraintOpt>
            | <primaryOpt>
            | <referencesOpt>

<defaultVal> ::= DEFAULT <datatype>

<nullOpt> ::= NOT NULL
            | NULL

<constraintOpt> ::= <constrName> UNIQUE
                | <constrName> CHECK '(' <expBoolCheck> ')'

<primaryOpt> ::= PRIMARY KEY

<referencesOpt> ::= REFERENCES id



<createOwner> ::= OWNER id
                | OWNER '=' id
                |

<createMode> ::= MODE number
             | MODE '=' number
             |


<showStmt> ::= SHOW DATABASES <likeOpt>

<likeOpt> ::= LIKE regex
            |

<alterStmt> ::= ALTER DATABASE id <alterDb>
            | ALTER TABLE id <alterTable>



<alterDb> ::= RENAME TO id
            | OWNER TO <ownerOPts>

<ownerOPts> ::= id
            | CURRENT_USER
            | SESSION_USER

<alterTable> ::= ADD <alterConstraint>
            | <alterCol>
            | DROP CONSTRAINT id
            | DROP COLUMN id
            | RENAME COLUMN id TO id


<alterConstraint> ::= CHECK '(' <expBoolCheck> ')'
                    | CONSTRAINT id UNIQUE '(' id ')'
                    | <createForeign>
                    | COLUMN id id

<alterCol> ::= ALTER COLUMN id SET NOT NULL
            | ALTER COLUMN id SET NULL

<dropStmt> ::= DROP TABLE id
            | DROP DATABASE <ifExists> id

<ifExists> ::= IF EXISTS 
            |


<insertStmt> ::= INSERT INTO id VALUES '(' <paramList> ')'

<updateStmt> ::= UPDATE id <optAlias> SET <updateCols> '=' <updateVals> <whereCl>

<updateCols> ::= id
                | '(' <idList> ')'

<updateVals> ::= <updateExp>
                | '(' <updateList> ')'



<updateList> ::= <updateExp> <updateList_>
<updateList_>::= ',' <updateExp> <updateList_>
                |/*epsilon*/

<updateExp> ::= <datatype>
                | DEFAULT

<deleteStmt> ::= DELETE FROM id <optAlias> <whereCl>
<useStmt> ::= USE DATABSE id