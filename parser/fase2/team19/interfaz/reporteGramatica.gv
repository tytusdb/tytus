digraph structs {
	node [shape=plaintext]
stack [label =  <<TABLE><TR>
<TD>PRODUCCIONES</TD>
<TD>SEMANTICO</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>bina ::= LENGTH PARIZQ E PARDR</TD>
<TD>bina =  Binario(1, E, None, None)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list</TD>
<TD>select2 = Select(4, False, None, select_list, None, None, None, None, None) </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= TANH ( E )</TD>
<TD>trig = Trigonometrica(TANH, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ATANH ( E )</TD>
<TD>trig = Trigonometrica(ATANH, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ACOSH ( E )</TD>
<TD>trig = Trigonometrica(ACOSH, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= SINH ( E )</TD>
<TD>trig = Trigonometrica(SINH, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= TAN ( E )</TD>
<TD>trig = Trigonometrica(TAN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= COS ( E )</TD>
<TD>trig = Trigonometrica(COS, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ASIND ( E )</TD>
<TD>trig = Trigonometrica(ASIND, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ASIN ( E )</TD>
<TD>trig = Trigonometrica(ASIN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ACOSD ( E )</TD>
<TD>trig = Trigonometrica(ACOSD, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ACOS ( E )</TD>
<TD>trig = Trigonometrica(ACOS, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ATAND ( E )</TD>
<TD>trig = Trigonometrica(ATAND, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  CADENA</TD>
<TD>seg = Primitivo(CADENA) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ASIN ( E )</TD>
<TD>trig = Trigonometrica(ASIN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>trig ::= ATAN ( E )</TD>
<TD>trig = Trigonometrica(ATAN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list</TD>
<TD>select2 = Select(4, False, None, select_list, None, None, None, None, None) </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= DIV ( E , E )</TD>
<TD>math =  Math_(DIV, E, E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= EXP ( E )</TD>
<TD>math = Math_(EXP), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= FACTORIAL ( E )</TD>
<TD>math = Math_(FACTORIAL), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= FLOOR ( E )</TD>
<TD>math = Math_(FLOOR), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= LN ( E )</TD>
<TD>math = Math_(LN), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= LOG ( E )</TD>
<TD>math = Math_(LOG), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= MOD ( E , E )</TD>
<TD>math =  Math_(MOD, E, E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= POWER ( E , E )</TD>
<TD>math =  Math_(POWER, E, E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= ROUND ( E )</TD>
<TD>math = Math_(ROUND), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= RADIANS ( E )</TD>
<TD>math = Math_(RADIANS), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= RANDOM ( )</TD>
<TD>math =  Math_(RANDOM, None, None)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= TRUNC ( E )</TD>
<TD>math = Math_(TRUNC), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= PI ( )</TD>
<TD>math =  Math_(PI, None, None)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= SIGN ( E )</TD>
<TD>math = Math_(SIGN), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= SQRT ( E )</TD>
<TD>math = Math_(SQRT), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DELETE FROM ID WHERE andOr PTCOMA</TD>
<TD>instruccion = Delete(ID, andOR) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones WHERE andOr PTCOMA</TD>
<TD>instruccion = Update(ID,asignaciones,andOr) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignaciones COMA asignacion</TD>
<TD>asignaciones = asignaciones; asignaciones.append(asignacion) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= COSD ( E )</TD>
<TD>trig = Trigonometrica(COSD, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= TAND ( E )</TD>
<TD>trig = Trigonometrica(TAND, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones WHERE andOr PTCOMA</TD>
<TD>instruccion = Update(ID,asignaciones,andOr) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignaciones COMA asignacion</TD>
<TD>asignaciones = asignaciones; asignaciones.append(asignacion) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= TAN ( E )</TD>
<TD>trig = Trigonometrica(TAN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= SIND ( E )</TD>
<TD>trig = Trigonometrica(SIND, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones WHERE andOr PTCOMA</TD>
<TD>instruccion = Update(ID,asignaciones,andOr) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignaciones COMA asignacion</TD>
<TD>asignaciones = asignaciones; asignaciones.append(asignacion) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= TAN ( E )</TD>
<TD>trig = Trigonometrica(TAN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= SIND ( E )</TD>
<TD>trig = Trigonometrica(SIND, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones WHERE andOr PTCOMA</TD>
<TD>instruccion = Update(ID,asignaciones,andOr) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignaciones COMA asignacion</TD>
<TD>asignaciones = asignaciones; asignaciones.append(asignacion) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= COS ( E )</TD>
<TD>trig = Trigonometrica(COS, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>trig ::= SIN ( E )</TD>
<TD>trig = Trigonometrica(SIN, E) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = DECIMAL PARIZQ ENTERO COMA ENTERO PARDR</TD>
<TD>tipo = Tipo(DECIMAL-ENTERO-ENTERO,None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = DECIMAL PARIZQ ENTERO COMA ENTERO PARDR</TD>
<TD>tipo = Tipo(DECIMAL-ENTERO-ENTERO,None)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list</TD>
<TD>select2 = Select(4, False, None, select_list, None, None, None, None, None) </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= width_bucket ( E )</TD>
<TD>math = Math_(WIDTH_BUCKET), E, None) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = valores</TD>
<TD>listaValores = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= width_bucket ( E )</TD>
<TD>math = Math_(WIDTH_BUCKET), E, None) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = valores</TD>
<TD>listaValores = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= width_bucket ( E )</TD>
<TD>math = Math_(WIDTH_BUCKET), E, None) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = listaValores COMA valores</TD>
<TD> listaValores = listaValores; listaValores.append(valores)</TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaValores :: = valores</TD>
<TD>listaValores = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list</TD>
<TD>select2 = Select(4, False, None, select_list, None, None, None, None, None) </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= POWER ( E , E )</TD>
<TD>math =  Math_(POWER, E, E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= PI ( )</TD>
<TD>math =  Math_(PI, None, None)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim AS seg</TD>
<TD>columna = IdAsId(prim, seg)</TD>
</TR><TR>
<TD>seg ::=  CADENA</TD>
<TD>seg = Primitivo(CADENA) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= LN ( E )</TD>
<TD>math = Math_(LN), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim AS seg</TD>
<TD>columna = IdAsId(prim, seg)</TD>
</TR><TR>
<TD>seg ::=  CADENA</TD>
<TD>seg = Primitivo(CADENA) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= EXP ( E )</TD>
<TD>math = Math_(EXP), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim AS seg</TD>
<TD>columna = IdAsId(prim, seg)</TD>
</TR><TR>
<TD>seg ::=  CADENA</TD>
<TD>seg = Primitivo(CADENA) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= factorial ( E )</TD>
<TD>math = Math_(FACTORIAL), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list</TD>
<TD>select2 = Select(4, False, None, select_list, None, None, None, None, None) </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= DIV ( E , E )</TD>
<TD>math =  Math_(DIV, E, E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= cbrt ( E )</TD>
<TD>math = Math_(CBRT), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>math ::= abs ( E )</TD>
<TD>math = Math_(ABS), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT DISTINCT select_list FROM inner orderby</TD>
<TD>select2 = Select(2, True, None, select_list, None, inner, orderby, None, None) </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= YEAR</TD>
<TD>momento = YEAR</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT DISTINCT select_list FROM inner orderby</TD>
<TD>select2 = Select(2, True, None, select_list, None, inner, orderby, None, None) </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= andOr and andOr</TD>
<TD>andOr = Expresion(andOr, andOr, AND) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= boolean</TD>
<TD>where = boolean </TD>
</TR><TR>
<TD>boolean ::= E IGUALIGUAL E</TD>
<TD>boolean =  Expresion(E, E, IGUALIGUAL)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= NOT EXISTS PARIZQ listaValores PARDR</TD>
<TD>where = Where(10, None, None, listaValores, None, None, None) </TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= columna NOT IN PARIZQ select2 PARDR</TD>
<TD>where = Where(9, None, columna, select2, None, None, None) </TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DELETE FROM ID WHERE andOr PTCOMA</TD>
<TD>instruccion = Delete(ID, andOR) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>operando ::= E AND E</TD>
<TD>operando = Expresion(E, E, AND) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= NOT EXISTS PARIZQ listaValores PARDR</TD>
<TD>where = Where(10, None, None, listaValores, None, None, None) </TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner WHERE complemSelect orderby limit</TD>
<TD>select2 = Select(5, False, None, select_list, subquery, inner, orderby, limit, complemSelect) </TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>complemSelect ::= andOr</TD>
<TD>complemSelect = andOr</TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID PUNTO ID</TD>
<TD>var =  IdId(Id(ID, ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID PUNTO MULT</TD>
<TD>var =  IdId(Id(ID, MULT)</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim seg</TD>
<TD>columna = IdAsId(prim, seg) </TD>
</TR><TR>
<TD>seg ::=  ID</TD>
<TD>seg = Id(ID) </TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones WHERE andOr PTCOMA</TD>
<TD>instruccion = Update(ID,asignaciones,andOr) </TD>
</TR><TR>
<TD>andOr ::= where </TD>
<TD>andOr = where</TD>
</TR><TR>
<TD>where ::= asignacion</TD>
<TD>where = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= true</TD>
<TD>boolean = Primitivo(true)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= true</TD>
<TD>boolean = Primitivo(true)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= true</TD>
<TD>boolean = Primitivo(true)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= true</TD>
<TD>boolean = Primitivo(true)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= true</TD>
<TD>boolean = Primitivo(true)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= false</TD>
<TD>boolean = Primitivo(false)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= false</TD>
<TD>boolean = Primitivo(false)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= false</TD>
<TD>boolean = Primitivo(false)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= false</TD>
<TD>boolean = Primitivo(false)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD COLUMN listaID tipo</TD>
<TD> alterprima = Alter(1,ADD,  COLUMN, listaID, tipo, None, None, None, None)</TD>
</TR><TR>
<TD>tipo :: =boolean</TD>
<TD>tipo = Tipo(boolean.upper(), None)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = PRIMARY KEY PARIZQ listaID PARDR</TD>
<TD>campo = Campo(4, listaID, None, None, None, None, None) </TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: =money</TD>
<TD>tipo = Tipo(money.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = character(25)</TD>
<TD>tipo =  Tipo(character- ENTERO,PRIMITIVO(25)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = PRIMARY KEY PARIZQ listaID PARDR</TD>
<TD>campo = Campo(4, listaID, None, None, None, None, None) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(25)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(25)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DROP TABLE ID PTCOMA</TD>
<TD>instruccion = Drop(2, False, ID) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID PARIZQ listaID PARDR VALUES value PTCOMA</TD>
<TD>instruccion =  InsertInto(1,ID, listaID, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = listaID COMA var</TD>
<TD>listaID = listaID; listaID.append(var)</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(20)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(20)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(25)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(25)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= list</TD>
<TD>select_list = list </TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= list COMA columna</TD>
<TD>list = list; list.append(columna) </TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  CASE cases END ID</TD>
<TD>columna = ColCase(cases, ID) </TD>
</TR><TR>
<TD>cases ::=  cases case</TD>
<TD>cases = cases; cases.append(case) </TD>
</TR><TR>
<TD>case ::=  WHEN asignacion THEN valores</TD>
<TD>case = Case(asignacion, valores) </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>cases ::=  cases case</TD>
<TD>cases = cases; cases.append(case) </TD>
</TR><TR>
<TD>case ::=  WHEN asignacion THEN valores</TD>
<TD>case = Case(asignacion, valores) </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>cases ::=  case</TD>
<TD>cases = [case] </TD>
</TR><TR>
<TD>case ::=  WHEN asignacion THEN valores</TD>
<TD>case = Case(asignacion, valores) </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR INHERITS PARIZQ ID PARDR PTCOMA</TD>
<TD>instruccion = CreateTable(ID, campos,ID)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = character(2)</TD>
<TD>tipo =  Tipo(character- ENTERO,PRIMITIVO(2)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = DECIMAL PARIZQ ENTERO COMA ENTERO PARDR</TD>
<TD>tipo = Tipo(DECIMAL-ENTERO-ENTERO,None)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>tipo :: =text</TD>
<TD>tipo = Tipo(text.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(30)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(30)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DROP TABLE ID PTCOMA</TD>
<TD>instruccion = Drop(2, False, ID) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = DECIMAL PARIZQ ENTERO COMA ENTERO PARDR</TD>
<TD>tipo = Tipo(DECIMAL-ENTERO-ENTERO,None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(150)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(150)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ALTER COLUMN ID TYPE tipo</TD>
<TD>alterprima = Alter(7,ALTER, COLUMN, ID, Tipo, None, None, TYPE, None)</TD>
</TR><TR>
<TD>tipo :: = varchar(80)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(80)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= Time</TD>
<TD>valores = Time </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>math ::= MD5 ( E )</TD>
<TD>math = Math_(MD5), E, None) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= UPDATE ID SET asignaciones PTCOMA</TD>
<TD>instruccion = Update(ID, asignaciones, None) </TD>
</TR><TR>
<TD>asignaciones ::= asignacion</TD>
<TD>asignaciones = asignacion </TD>
</TR><TR>
<TD>asignacion ::= E = E</TD>
<TD>asignacion = Expresion(E, E, IGUAL) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD COLUMN listaID tipo</TD>
<TD> alterprima = Alter(1,ADD,  COLUMN, listaID, tipo, None, None, None, None)</TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= select2 PTCOMA</TD>
<TD>instruccion = select2</TD>
</TR><TR>
<TD>select2 ::= SELECT select_list FROM subquery inner orderby limit</TD>
<TD>select2 = Select(3, False, None, select_list, subquery, inner, orderby, limit, None)</TD>
</TR><TR>
<TD>limit ::= </TD>
<TD>limit =  </TD>
</TR><TR>
<TD>orderby ::= </TD>
<TD>orderby =  </TD>
</TR><TR>
<TD>inner ::= compSelect</TD>
<TD>inner = compSelect </TD>
</TR><TR>
<TD>compSelect ::= list</TD>
<TD>compSelect = list</TD>
</TR><TR>
<TD>list ::= columna</TD>
<TD>list = [columna]</TD>
</TR><TR>
<TD>columna ::=  prim</TD>
<TD>columna   = prim</TD>
</TR><TR>
<TD>prim ::=  var</TD>
<TD>prim = var </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>subquery ::= </TD>
<TD>subquery = </TD>
</TR><TR>
<TD>select_list ::= MULT</TD>
<TD>select_list =MULT</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= NUMDECIMAL</TD>
<TD>valores = Primitivo(NUMDECIMAL) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(15)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(15)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DROP TABLE ID PTCOMA</TD>
<TD>instruccion = Drop(2, False, ID) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  DROP DATABASE IF EXISTS ID PTCOMA</TD>
<TD>instrucciones = Drop(1, True, ID) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  SHOW DATABASES PTCOMA</TD>
<TD>instruccion = Show(True) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = INSERT INTO ID VALUES value PTCOMA</TD>
<TD>instruccion = InsertInto(2,ID, None, value)</TD>
</TR><TR>
<TD>value :: = PARIZQ listaExpresiones PARDR</TD>
<TD>value = listaExpresiones </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= ENTERO</TD>
<TD>valores = Primitivo(ENTERO) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion  ::=  ALTER TABLE ID lalterprima PTCOMA</TD>
<TD>instruccion = AlterTable(ID,lalterprima ) </TD>
</TR><TR>
<TD>lalterprima ::=  alterprima</TD>
<TD>lalterprima = [alterprima]</TD>
</TR><TR>
<TD>alterprima ::= ADD CONSTRAINT ID FOREIGN KEY PARIZQ listaID PARDR REFERENCES ID PARIZQ listaID PARDR</TD>
<TD>alterprima = Alter(10,ADD, FOREIGN KEY, KEY, None, None, PARDR, None, ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>listaID :: = var</TD>
<TD>listaID = var</TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD> campo = Campo(5, ID, ID, None, None, None, None,lexer.lineno,columna)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = CHECK PARIZQ checkprima PARDR</TD>
<TD>acom = Acompaniamiento(CHECK, t[3]) </TD>
</TR><TR>
<TD>checkprima ::= listaValores</TD>
<TD> checkprima.append(listaValores)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= E MAYOR E</TD>
<TD>boolean =  Expresion(E, E, MAYOR)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>tipo :: =DATE</TD>
<TD>tipo = Tipo(DATE.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = CHECK PARIZQ checkprima PARDR</TD>
<TD>acom = Acompaniamiento(CHECK, t[3]) </TD>
</TR><TR>
<TD>checkprima ::= listaValores</TD>
<TD> checkprima.append(listaValores)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>boolean ::= E MAYOR E</TD>
<TD>boolean =  Expresion(E, E, MAYOR)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>var ::= ID</TD>
<TD>var = Id(ID)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = CONSTRAINT ID</TD>
<TD>acom = Acompaniamiento(CONSTRAINT,t[2]) </TD>
</TR><TR>
<TD>tipo :: =DATE</TD>
<TD>tipo = Tipo(DATE.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = UNIQUE</TD>
<TD>acom = Acompaniamiento(UNIQUE, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= CREATE TYPE ID AS ENUM PARIZQ listaExpresiones PARDR PTCOMA</TD>
<TD>instruccion = CreateType(ID, listaExpresiones) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = listaExpresiones COMA E</TD>
<TD>listaExpresiones = listaExpresiones; listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>listaExpresiones :: = E</TD>
<TD>listaExpresiones.append(E)</TD>
</TR><TR>
<TD>E ::= valores </TD>
<TD>E = valores </TD>
</TR><TR>
<TD>valores ::= CADENA</TD>
<TD>valores = Primitivo(CADENA) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= TIMESTAMP CADENA</TD>
<TD>Time = Time(6, None, CADENA, None) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= CURRENT_TIME</TD>
<TD>Time = Time(5, None, None, None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= CURRENT_DATE</TD>
<TD>Time = Time(4, None, None, None) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= date_part PARIZQ CADENA COMA INTERVAL CADENA PARDR</TD>
<TD>Time = Time(3, None, CADENA, CADENA)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= date_part PARIZQ CADENA COMA INTERVAL CADENA PARDR</TD>
<TD>Time = Time(3, None, CADENA, CADENA)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= DAY</TD>
<TD>momento = DAY</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= MONTH</TD>
<TD>momento = MONTH</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= YEAR</TD>
<TD>momento = YEAR</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= SECOND</TD>
<TD>momento = SECOND</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= MINUTE</TD>
<TD>momento = MINUTE</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= HOUR</TD>
<TD>momento = HOUR</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= NOW PARIZQ PARDR</TD>
<TD>Time =  Time(2, None, None, None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= date_part PARIZQ CADENA COMA INTERVAL CADENA PARDR</TD>
<TD>Time = Time(3, None, CADENA, CADENA)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= SELECT Time PTCOMA</TD>
<TD>instruccion = Select(1, False, Time, None, None, None, None, None, None) </TD>
</TR><TR>
<TD>Time ::= EXTRACT PARIZQ momento FROM TIMESTAMP  CADENA PARDR</TD>
<TD>Time = Time(1, momento, CADENA, None)</TD>
</TR><TR>
<TD>momento ::= YEAR</TD>
<TD>momento = YEAR</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(15)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(15)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: =date</TD>
<TD>tipo = Tipo(date.upper(), None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(15)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(15)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = UNIQUE</TD>
<TD>acom = Acompaniamiento(UNIQUE, None)</TD>
</TR><TR>
<TD>tipo :: = varchar(15)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(15)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo</TD>
<TD>campo = Campo(1,ID,Tipo,None,None,None,None)</TD>
</TR><TR>
<TD>tipo :: = varchar(50)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(50)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion :: = CREATE TABLE ID PARIZQ campos PARDR PTCOMA</TD>
<TD>instruccion :: = CreateTable(ID,campos,None) </TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = DECIMAL PARIZQ ENTERO COMA ENTERO PARDR</TD>
<TD>tipo = Tipo(DECIMAL-ENTERO-ENTERO,None)</TD>
</TR><TR>
<TD>campos :: = campos COMA campo</TD>
<TD>campos = campos; campos.append(campo)</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: = varchar(150)</TD>
<TD>tipo =  Tipo(varchar- ENTERO,PRIMITIVO(150)</TD>
</TR><TR>
<TD>campos :: = campo</TD>
<TD> campos = campo</TD>
</TR><TR>
<TD>campo :: = ID tipo acompaniamiento</TD>
<TD>campo = Campo(1,ID,tipo,acompaniamiento,None,None,None) </TD>
</TR><TR>
<TD>acompaniamiento :: = acompaniamiento acom</TD>
<TD> acompaniamiento = acompaniamiento; acompaniamiento.append(acom) </TD>
</TR><TR>
<TD>acom :: = PRIMARY KEY</TD>
<TD>acom = Acompaniamiento(PRIMARYKEY, None)</TD>
</TR><TR>
<TD>acompaniamiento :: = acom</TD>
<TD>acompaniamiento.append([acom]) </TD>
</TR><TR>
<TD>acom :: = NOT NULL</TD>
<TD>acom = Acompaniamiento(NOTNULL, None) </TD>
</TR><TR>
<TD>tipo :: =integer</TD>
<TD>tipo = Tipo(integer.upper(), None)</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::= USE DATABASE ID PTCOMA</TD>
<TD>instruccion = Use(ID) </TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  opcionCR IF NOT EXISTS ID complemento PTCOMA</TD>
<TD>instruccion = CreateReplace(opcionCR, True, complemento, PTCOMA)</TD>
</TR><TR>
<TD>complemento ::=  OWNER IGUAL ID MODE IGUAL ENTERO</TD>
<TD>complemento = ComplementoCR(ID, ENTERO) </TD>
</TR><TR>
<TD>opcionCR ::=  CREATE DATABASE</TD>
<TD>opcionCR = 1</TD>
</TR><TR>
<TD>s ::= intrucciones</TD>
<TD>instrucciones=instruecciones;instrucciones.append(instruccion)</TD>
</TR><TR>
<TD>instruccion ::=  opcionCR IF NOT EXISTS ID complemento PTCOMA</TD>
<TD>instruccion = CreateReplace(opcionCR, True, complemento, PTCOMA)</TD>
</TR><TR>
<TD>complemento ::=  OWNER IGUAL ID MODE IGUAL ENTERO</TD>
<TD>complemento = ComplementoCR(ID, ENTERO) </TD>
</TR><TR>
<TD>opcionCR ::=  CREATE DATABASE</TD>
<TD>opcionCR = 1</TD>
</TR><TR>
<TD>instrucciones ::= instrucciones instruccion</TD>
<TD>intrucciones=[instruccion] </TD>
</TR><TR>
<TD>instruccion ::=  opcionCR IF NOT EXISTS ID complemento PTCOMA</TD>
<TD>instruccion = CreateReplace(opcionCR, True, complemento, PTCOMA)</TD>
</TR><TR>
<TD>complemento ::=  OWNER IGUAL ID MODE IGUAL ENTERO</TD>
<TD>complemento = ComplementoCR(ID, ENTERO) </TD>
</TR><TR>
<TD>opcionCR ::=  CREATE DATABASE</TD>
<TD>opcionCR = 1</TD>
</TR></TABLE>>, ];
}
