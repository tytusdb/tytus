##################################################
# Rules of the parser that evaluate the symbols
# returned from the scanner.
##################################################

<S> ::= <sentences>

<sentences> ::= <sentences> <sentence>
              |  <sentence> 

<sentence> ::= <DDL> ";"
             |  <DML> ";"

<DDL> ::= <create>
       |  <drop>
       |  <alter>

<DML> ::= <select>
       |  <insert>
       |  <delete_instruction>
       |  <update_instruction>
       |  <truncate>
       |  <show>

<create> ::= <createDatabase>
          |  <createTable>
          |  <createType>

<drop> ::= <dropDatabase>
        |  <dropTable>

<dropDatabase> ::= drop database [if exists] id

<dropTable> ::= drop table id

<alter> ::= <alterDatabase>
         |  <alterTable>

<alterDatabase> ::= alter database id rename to id
                 |  alter database id owner to id

<alterTable> ::= alter table id <alterOptions>

<alterOptions> ::= add column id <type>
                |  drop column id
                |  add check "(" <expression> ")"
                |  add constraint id unique "(" id ")"
                |  add foreign key "(" id ")" references id
                |  alter column id set not null
                |  drop constraint id
                |  alter column id type <type>

<select> ::= select [distinct] <expression_list> from <expression> [where <expression>] [order by <sortexpressionlist>] [limit (<expression> | all)] [offset <expression>] [group by <expression_list> having <expression>] <select_p>

<select_p> ::= union [all] select [distinct] <expression_list> from <expression> [where <expression>] [order by <sortexpressionlist>] [limit (<expression> | all)] [offset <expression>] [group by <expression_list> having <expression>] <select_p>
          |  intersect [all] select [distinct] <expression_list> from <expression> [where <expression>] [order by <sortexpressionlist>] [limit (<expression> | all)] [offset <expression>] [group by <expression_list> having <expression>] <select_p>
          |  except [all] select [distinct] <expression_list> from <expression> [where <expression>] [order by <sortexpressionlist>] [limit (<expression> | all)] [offset <expression>] [group by <expression_list> having <expression>] <select_p>
          | 
        
<insert> ::= insert into id ["(" <idlist> ")"] values "(" <expression_list> ")"

<expression_list> ::= <expression> <expression_list_p>

<expression_list_p> ::= "," <expression> <expression_list_p>
                     | 

<sortexpressionlist> ::= <expression> [asc|desc] <sortexpressionlist_p>

<sortexpressionlist_p> ::= "," [asc|desc] <sortexpressionlist_p>
                        | 

<createDatabase> ::= create [or replace] database [if not exists] id [owner ["="] id] [mode ["="] integer]

<createTable> ::= create table id "(" <columns> ")"
               |  create table id "(" <columns> ")" inherits "(" id ")"

<createType> ::= create type id as enum "(" <expression_list> ")"

<columns> ::= <column> <columns_p>

<columns_p> ::= "," <column> <columns_p>
             | 

<column> ::= id <type> [default <expression>] [[not] null] [primary key] [references id] [[constraint id] unique] [[constraint id] check (<expression>)]
          |  [constraint id] check (<expression>)
          |  unique (<idlist>)
          |  primary key "(" <idlist> ")"
          |  foreign key "(" <idlist> ")" references id "(" <idlist> ")"

<idlist> ::= id <idlist_p>

<idlist_p> ::= "," id <idlist_p>
            |

<case> ::= <case_p> 

<case_p> ::= <case_list> [else <expression>] end <case_p>
          | 

<case_list> ::= when <expression> then <expression> <case_list_p>

<case_list_p> ::= <case_list> when <expression> then <case_list_p>
               | 

<type> ::= smallint
        |  integer
        |  bigint
        |  decimal
        |  numeric
        |  real
        |  double
        |  precision
        |  money
        |  character
        |  varying "(" integer ")" # variable-length with limit
        |  varchar "(" integer ")" # variable-length with limit
        |  character "(" integer ")" # fixed-length, blank padded
        |  char "(" integer ")" # fixed-length, blank padded
        |  text # variable unlimited length
        # |  faltan variables de tipo date
        |  boolean

<expression> ::= <expression> nseparator <expression> #left
              |  plus <expression> #right
              |  minus <expression> #right
              |  <expression> exponentiation <expression>#left
              |  <expression> multiplication <expression>#left
              |  <expression> divition <expression>#left
              |  <expression> modulo <expression>#left
              |  <expression> plus <expression>#left
              |  <expression> minus <expression>#left
              |  <expression> anyoperator <expression> # mentions all other native and user-defined operators Â¿?
              |  <expression> between <expression>
              |  <expression> in <expression>
              |  <expression> like <expression>
              |  <expression> ilike <expression>
              |  <expression> similar <expression>
              |  <expression> lessthan <expression>
              |  <expression> greaterthan <expression>
              |  <expression> equal <expression>
              |  <expression> lessthanequal <expression>
              |  <expression> greaterthanequal <expression>
              |  <expression> notequal <expression>
              |  <expression> is <expression>
              |  <expression> isnull
              |  <expression> notnull
              |  not <expression>#right
              |  <expression> and <expression>#left
              |  <expression> or <expression>#left
              |  distinct from <expression>
              #aggregate functions
              |  count "(" <expression> ")"
              |  sum "(" <expression> ")"
              |  avg "(" <expression> ")"
              |  max "(" <expression> ")"
              |  min "(" <expression> ")"
              #mathematical functions
              |  abs "(" <expression> ")"
              |  cbrt "(" <expression> ")"
              |  ceil "(" <expression> ")"
              |  ceiling "(" <expression> ")"
              |  degrees "(" <expression> ")"
              |  div "(" <expression> ")"
              |  exp "(" <expression> ")"
              |  factorial "(" <expression> ")"
              |  floor "(" <expression> ")"
              |  gcd "(" <expression> ")"
              |  lcm "(" <expression> ")"
              |  ln "(" <expression> ")"
              |  log "(" <expression> ")"
              |  log10 "(" <expression> ")"
              |  min_scale "(" <expression> ")"
              |  mod "(" <expression> ")"
              |  pi "(" <expression> ")"
              |  power "(" <expression> ")"
              |  radians "(" <expression> ")"
              |  round "(" <expression> ")"
              |  scale "(" <expression> ")"
              |  sign "(" <expression> ")"
              |  sqrt "(" <expression> ")"
              |  trim_scale "(" <expression> ")"
              |  truc "(" <expression> ")"
              |  width_bucket "(" <expression> ")"
              |  random "(" <expression> ")"
              |  setseed "(" <expression> ")"
              # trigonometric functions
              |  acos "(" <expression> ")"
              |  acosd "(" <expression> ")"
              |  asin "(" <expression> ")"
              |  asind "(" <expression> ")"
              |  atan "(" <expression> ")"
              |  atand "(" <expression> ")"
              |  atan2 "(" <expression> ")"
              |  atan2d "(" <expression> ")"
              |  cos "(" <expression> ")"
              |  cosd "(" <expression> ")"
              |  cot "(" <expression> ")"
              |  cotd "(" <expression> ")"
              |  sin "(" <expression> ")"
              |  sind "(" <expression> ")"
              |  tan "(" <expression> ")"
              |  tand "(" <expression> ")"
              |  sinh "(" <expression> ")"
              |  cosh "(" <expression> ")"
              |  tanh "(" <expression> ")"
              |  asinh "(" <expression> ")"
              |  acosh "(" <expression> ")"
              |  atanh "(" <expression> ")"
              # binary string functions
              |  length "(" <expression> ")"
              |  substring "(" <expression> "," <expression> "," <expression> ")"
              |  trim "(" <expression> ")"
              |  get_byte "(" <expression> ")"
              |  md5 "(" <expression> ")"
              |  set_byte "(" <expression> ")"
              |  sha256 "(" <expression> ")"
              |  substr "(" <expression> "," <expression> "," <expression> ")"
              |  convert "(" <expression> ")"
              |  encode "(" <expression> ")"
              |  decode "(" <expression> ")"
              |  greatest "(" <expression_list> ")"
              |  least "(" <expression_list> ")"
              |  "(" <select> ")"
              |  <case>
              |  "(" <expression> ")"
              |  <value>

<expression> ::= plus <expression> <expresion_p> #right
              |  minus <expression> <expresion_p>#right
              |  not <expression> <expresion_p>#right
              |  distinct from <expression> <expresion_p>
              #aggregate functions
              |  count "(" <expression> ")" <expresion_p>
              |  sum "(" <expression> ")" <expresion_p>
              |  avg "(" <expression> ")" <expresion_p>
              |  max "(" <expression> ")" <expresion_p>
              |  min "(" <expression> ")" <expresion_p>
              #mathematical functions
              |  abs "(" <expression> ")" <expresion_p>
              |  cbrt "(" <expression> ")" <expresion_p>
              |  ceil "(" <expression> ")" <expresion_p>
              |  ceiling "(" <expression> ")" <expresion_p>
              |  degrees "(" <expression> ")" <expresion_p>
              |  div "(" <expression> ")" <expresion_p>
              |  exp "(" <expression> ")" <expresion_p>
              |  factorial "(" <expression> ")" <expresion_p>
              |  floor "(" <expression> ")" <expresion_p>
              |  gcd "(" <expression> ")" <expresion_p>
              |  lcm "(" <expression> ")" <expresion_p>
              |  ln "(" <expression> ")" <expresion_p>
              |  log "(" <expression> ")" <expresion_p>
              |  log10 "(" <expression> ")" <expresion_p>
              |  min_scale "(" <expression> ")" <expresion_p>
              |  mod "(" <expression> ")" <expresion_p>
              |  pi "(" <expression> ")" <expresion_p>
              |  power "(" <expression> ")" <expresion_p>
              |  radians "(" <expression> ")" <expresion_p>
              |  round "(" <expression> ")" <expresion_p>
              |  scale "(" <expression> ")" <expresion_p>
              |  sign "(" <expression> ")" <expresion_p>
              |  sqrt "(" <expression> ")" <expresion_p>
              |  trim_scale "(" <expression> ")" <expresion_p>
              |  truc "(" <expression> ")" <expresion_p>
              |  width_bucket "(" <expression> ")" <expresion_p>
              |  random "(" <expression> ")" <expresion_p>
              |  setseed "(" <expression> ")" <expresion_p>
              # trigonometric functions
              |  acos "(" <expression> ")" <expresion_p>
              |  acosd "(" <expression> ")" <expresion_p>
              |  asin "(" <expression> ")" <expresion_p>
              |  asind "(" <expression> ")" <expresion_p>
              |  atan "(" <expression> ")" <expresion_p>
              |  atand "(" <expression> ")" <expresion_p>
              |  atan2 "(" <expression> ")" <expresion_p>
              |  atan2d "(" <expression> ")" <expresion_p>
              |  cos "(" <expression> ")" <expresion_p>
              |  cosd "(" <expression> ")" <expresion_p>
              |  cot "(" <expression> ")" <expresion_p>
              |  cotd "(" <expression> ")" <expresion_p>
              |  sin "(" <expression> ")" <expresion_p>
              |  sind "(" <expression> ")" <expresion_p>
              |  tan "(" <expression> ")" <expresion_p>
              |  tand "(" <expression> ")" <expresion_p>
              |  sinh "(" <expression> ")" <expresion_p>
              |  cosh "(" <expression> ")" <expresion_p>
              |  tanh "(" <expression> ")" <expresion_p>
              |  asinh "(" <expression> ")" <expresion_p>
              |  acosh "(" <expression> ")" <expresion_p>
              |  atanh "(" <expression> ")" <expresion_p>
              # binary string functions
              |  length "(" <expression> ")" <expresion_p>
              |  substring "(" <expression> "," <expression> "," <expression> ")" <expresion_p>
              |  trim "(" <expression> ")" <expresion_p>
              |  get_byte "(" <expression> ")" <expresion_p>
              |  md5 "(" <expression> ")" <expresion_p>
              |  set_byte "(" <expression> ")" <expresion_p>
              |  sha256 "(" <expression> ")" <expresion_p>
              |  substr "(" <expression> "," <expression> "," <expression> ")" <expresion_p>
              |  convert "(" <expression> ")" <expresion_p>
              |  encode "(" <expression> ")" <expresion_p>
              |  decode "(" <expression> ")" <expresion_p>
              |  greatest "(" <expression_list> ")" <expresion_p>
              |  least "(" <expression_list> ")" <expresion_p>
              |  "(" <select> ")" <expresion_p>
              |  <case> <expresion_p>
              |  "(" <expression> ")" <expresion_p>
              |  <value> <expresion_p>

<expresion_p> ::= nseparator <expression> <expresion_p>#left
              |  exponentiation <expression> <expresion_p>#left
              |  multiplication <expression> <expresion_p>#left
              |  divition <expression> <expresion_p>#left
              |  modulo <expression> <expresion_p>#left
              |  plus <expression> <expresion_p>#left
              |  minus <expression> <expresion_p>#left
              |  anyoperator <expression> <expresion_p># mentions all other native and user-defined operators Â¿?
              |  between <expression> <expresion_p>
              |  in <expression> <expresion_p>
              |  like <expression> <expresion_p>
              |  ilike <expression> <expresion_p>
              |  similar <expression> <expresion_p>
              |  lessthan <expression> <expresion_p>
              |  greaterthan <expression> <expresion_p>
              |  equal <expression> <expresion_p>
              |  lessthanequal <expression> <expresion_p>
              |  greaterthanequal <expression> <expresion_p>
              |  notequal <expression> <expresion_p>
              |  is <expression> <expresion_p>
              |  isnull <expresion_p>
              |  notnull <expresion_p>
              |  and <expression> <expresion_p>#left
              |  or <expression> <expresion_p>#left
              | 

<value>  ::= int | real | string | id | asterisk


<delete_instruction> ::= delete from id where <expression>

<truncate> ::=  truncate [table] <idlist>
              
<show> ::= show databases [like regex]

<update_instruction> ::= update id set <reallocation_of_values> where <expression>

<reallocation_of_values> ::= id equal <expression> <reallocation_of_values_p>

<reallocation_of_values_p> ::= "," id equal <expression> <reallocation_of_values_p>
                            | 

##################################################
# List of the symbols returned by the scanner,
# also known as "lexer". Linear white spaces
# between these symbols will be implicitly ignored
# by the scanner, avoiding to clutter these
# definitions with unnecessary details.
##################################################

create="CREATE";
or="OR";
replace="REPLACE";
database="DATABASE";
if="IF";
not="NOT";
exists="EXISTS";
truncate = "TRUNCATE";
show = "SHOW";
name="NAME";
owner="OWNER";
mode="MODE";
table="TABLE";
default="DEFAULT";
null="NULL";
constraint="CONSTRAINT";
unique="UNIQUE";
check="CHECK";
smallint="SMALLINT";
integer="INTEGER";
bigint="BIGINT";
decimal="DECIMAL";
numeric="NUMERIC";
real="REAL";
double="DOUBLE";
precision="PRECISION";
money="MONEY";
character="CHARACTER";
varying="VARYING";
varchar="VARCHAR";
character="CHARACTER";
char="CHAR";
text="TEXT";
boolean="BOOLEAN";
nseparator=".";
typecast="::";
plus="+";
minus="-";
exponentiation="^";
multiplication="*";
divition="/";
modulo="%";
between="BETWEEN";
in="IN";
like="LIKE";
ilike="ILIKE";
similar="SIMILAR";
lessthan="<";
greaterthan=">";
equal="=";
lessthanequal="<=";
greaterthanequal=">=";
notequal="<>" | "!=";
is="IS";
isnull="ISNULL";
notnull="NOTNULL";
and="AND";
or="OR";
select="SELECT";
distinct="DISTINCT";
from="FROM";
where="WHERE";
order="ORDER";
by="BY";
group="GROUP";
having="HAVING";
asc="ASC";
desc="DESC";
insert="INSERT";
into="INTO";
values="VALUES";
int = digits;
real = digits (real_decimals | real_scale | real_decimals real_scale);
id = letter {digit | letter | "_"};

delete="DELETE";
only="ONLY";
as="AS";
asterisk="*";
current="CURRENT";
of="OF";
returning="returning";
true="TRUE";
false="FALSE";
update="UPDATE";
set="SET";

drop="DROP";
alter="ALTER";
rename="RENAME";
owner="OWNER";
to="TO";
add="ADD";
column="COLUMN";


##################################################
# Sub-rules used to define the lexer.
##################################################
digit = "0".."9";
digits = digit {digit};
real_decimals = "." digits;
real_scale = ("E"|"e") ["+"|"-"] digits;
letter = "a".."z" | "A".."Z";
regex = %(\w)+%