##################################################
# Rules of the parser that evaluate the symbols
# returned from the scanner.
##################################################

<S> ::= <sentences>

<sentences> ::= <sentences> <sentence>
              |  <sentence> 

<sentence> ::= <DDL> ";"
             |  <DML> ";"

<DDL> ::= <create>
       |  <drop>
       |  <alter>

<DML> ::= <select>
       |  <insert>
       |  <delete>
       |  <update>
       |  <truncate>
       |  <show>

<create> ::= <createDatabase>
          |  <createTable>

<select> ::= select [distinct] <expression_list> from <expression> [where <expression>] [order by <sortexpressionlist>] [group by <expression_list> having <expression>]

<insert> ::= insert into id ["(" <idlist> ")"] values "(" <expression_list> ")"

<expression_list> ::= <expression_list> "," <expression>
                   |  <expression>

<sortexpressionlist> ::= <sortexpressionlist> "," <expression> [asc|desc]
                      |  <expression> [asc|desc]

<createDatabase> ::= create [or replace] database [if not exists] name [owner ["="] id] [mode ["="] integer]

<createTable> ::= create table id "(" <columns> ")"

<columns> ::= <columns> "," <column>
           |  <column>

<column> ::= id <type> [default <expression>] [[not] null] [[constraint id] unique] [[constraint id] check (<expression>)]
          |  [constraint id] check (<expression>)
          |  unique (<idlist>)

<idlist> ::= <idlist> "," id
          |  id

<type> ::= smallint
        |  integer
        |  bigint
        |  decimal
        |  numeric
        |  real
        |  double
        |  precision
        |  money
        |  character
        |  varying "(" integer ")" # variable-length with limit
        |  varchar "(" integer ")" # variable-length with limit
        |  character "(" integer ")" # fixed-length, blank padded
        |  char "(" integer ")" # fixed-length, blank padded
        |  text # variable unlimited length
        # |  faltan variables de tipo date
        |  boolean

<expression> ::= <expression> nseparator <expression> #left
              |  <expression> typecast <expression> #left
              |  <expression> typecast <expression> # add array element selection ¿?
              |  plus <expression> #right
              |  minus <expression> #right
              |  <expression> exponentiation <expression>#left
              |  <expression> multiplication <expression>#left
              |  <expression> divition <expression>#left
              |  <expression> modulo <expression>#left
              |  <expression> plus <expression>#left
              |  <expression> minus <expression>#left
              |  <expression> anyoperator <expression> # mentions all other native and user-defined operators ¿?
              |  <expression> between <expression>
              |  <expression> in <expression>
              |  <expression> like <expression>
              |  <expression> ilike <expression>
              |  <expression> similar <expression>
              |  <expression> lessthan <expression>
              |  <expression> greaterthan <expression>
              |  <expression> equal <expression>
              |  <expression> lessthanequal <expression>
              |  <expression> greaterthanequal <expression>
              |  <expression> notequal <expression>
              |  <expression> is <expression>
              |  <expression> isnull
              |  <expression> notnull
              |  not <expression>#right
              |  <expression> and <expression>#left
              |  <expression> or <expression>#left
              |  "(" <expression> ")"
              |  <value>


<value>  ::= int | real | string | id

<truncate> ::= truncate [table] <idlist>

<show>::= show databases [like regex]

##################################################
# List of the symbols returned by the scanner,
# also known as "lexer". Linear white spaces
# between these symbols will be implicitly ignored
# by the scanner, avoiding to clutter these
# definitions with unnecessary details.
##################################################

create="CREATE";
or="OR";
replace="REPLACE";
database="DATABASE";
truncate = "TRUNCATE";
show = "SHOW";
if="IF";
not="NOT";
exists="EXISTS";
name="NAME";
owner="OWNER";
mode="MODE";
table="TABLE";
default="DEFAULT";
null="NULL";
constraint="CONSTRAINT";
unique="UNIQUE";
check="CHECK";
smallint="SMALLINT";
integer="INTEGER";
bigint="BIGINT";
decimal="DECIMAL";
numeric="NUMERIC";
real="REAL";
double="DOUBLE";
precision="PRECISION";
money="MONEY";
character="CHARACTER";
varying="VARYING";
varchar="VARCHAR";
character="CHARACTER";
char="CHAR";
text="TEXT";
boolean="BOOLEAN";
nseparator=".";
typecast="::";
plus="+";
minus="-";
exponentiation="^";
multiplication="*";
divition="/";
modulo="%";
between="BETWEEN";
in="IN";
like="LIKE";
ilike="ILIKE";
similar="SIMILAR";
lessthan="<";
greaterthan=">";
equal="=";
lessthanequal="<=";
greaterthanequal=">=";
notequal="<>";
is="IS";
isnull="ISNULL";
notnull="NOTNULL";
and="AND";
or="OR";
select="SELECT";
distinct="DISTINCT";
from="FROM";
where="WHERE";
order="ORDER";
by="BY";
group="GROUP";
having="HAVING";
asc="ASC";
desc="DESC";
insert="INSERT";
into="INTO";
values="VALUES";
int = digits;
real = digits (real_decimals | real_scale | real_decimals real_scale);
id = letter {digit | letter | "_"};

##################################################
# Sub-rules used to define the lexer.
##################################################
digit = "0".."9";
digits = digit {digit};
real_decimals = "." digits;
real_scale = ("E"|"e") ["+"|"-"] digits;
letter = "a".."z" | "A".."Z";
regex = %(\w)+%;